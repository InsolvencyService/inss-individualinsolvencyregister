/*! For license information please see all.js.LICENSE.txt */
(()=>{var t={"./js/all.js":function(t,e,n){var i,o,s,r;function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}r=function(t){"use strict";function e(t,e){if(window.NodeList.prototype.forEach)return t.forEach(e);for(var n=0;n<t.length;n++)e.call(window,t[n],n,t)}function i(t){this.$module=t,this.moduleId=t.getAttribute("id"),this.$sections=t.querySelectorAll(".govuk-accordion__section"),this.$showAllButton="",this.browserSupportsSessionStorage=o.checkForSessionStorage(),this.controlsClass="govuk-accordion__controls",this.showAllClass="govuk-accordion__show-all",this.showAllTextClass="govuk-accordion__show-all-text",this.sectionExpandedClass="govuk-accordion__section--expanded",this.sectionButtonClass="govuk-accordion__section-button",this.sectionHeaderClass="govuk-accordion__section-header",this.sectionHeadingClass="govuk-accordion__section-heading",this.sectionHeadingTextClass="govuk-accordion__section-heading-text",this.sectionHeadingTextFocusClass="govuk-accordion__section-heading-text-focus",this.sectionShowHideToggleClass="govuk-accordion__section-toggle",this.sectionShowHideToggleFocusClass="govuk-accordion__section-toggle-focus",this.sectionShowHideTextClass="govuk-accordion__section-toggle-text",this.upChevronIconClass="govuk-accordion-nav__chevron",this.downChevronIconClass="govuk-accordion-nav__chevron--down",this.sectionSummaryClass="govuk-accordion__section-summary",this.sectionSummaryFocusClass="govuk-accordion__section-summary-focus"}(function(t){var e,n,i,o;"defineProperty"in Object&&function(){try{return Object.defineProperty({},"test",{value:42}),!0}catch(t){return!1}}()||(e=Object.defineProperty,n=Object.prototype.hasOwnProperty("__defineGetter__"),i="Getters & setters cannot be defined on this javascript engine",o="A property cannot both have accessors and be writable or have a value",Object.defineProperty=function(t,s,r){if(e&&(t===window||t===document||t===Element.prototype||t instanceof Element))return e(t,s,r);if(null===t||!(t instanceof Object||"object"===a(t)))throw new TypeError("Object.defineProperty called on non-object");if(!(r instanceof Object))throw new TypeError("Property description must be an object");var c=String(s),u="value"in r||"writable"in r,l="get"in r&&a(r.get),d="set"in r&&a(r.set);if(l){if("function"!==l)throw new TypeError("Getter must be a function");if(!n)throw new TypeError(i);if(u)throw new TypeError(o);Object.__defineGetter__.call(t,c,r.get)}else t[c]=r.value;if(d){if("function"!==d)throw new TypeError("Setter must be a function");if(!n)throw new TypeError(i);if(u)throw new TypeError(o);Object.__defineSetter__.call(t,c,r.set)}return"value"in r&&(t[c]=r.value),t})}).call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){"bind"in Function.prototype||Object.defineProperty(Function.prototype,"bind",{value:function(t){var e,n=Array,i=Object,o=i.prototype,s=n.prototype,r=function(){},c=o.toString,u="function"==typeof Symbol&&"symbol"===a(Symbol.toStringTag),l=Function.prototype.toString,d=function(t){try{return l.call(t),!0}catch(t){return!1}},h="[object Function]",p="[object GeneratorFunction]";e=function(t){if("function"!=typeof t)return!1;if(u)return d(t);var e=c.call(t);return e===h||e===p};var f=s.slice,m=s.concat,v=s.push,b=Math.max,g=this;if(!e(g))throw new TypeError("Function.prototype.bind called on incompatible "+g);for(var y,w=f.call(arguments,1),E=function(){if(this instanceof y){var e=g.apply(this,m.call(w,f.call(arguments)));return i(e)===e?e:this}return g.apply(t,m.call(w,f.call(arguments)))},k=b(0,g.length-w.length),C=[],A=0;A<k;A++)v.call(C,"$"+A);return y=Function("binder","return function ("+C.join(",")+"){ return binder.apply(this, arguments); }")(E),g.prototype&&(r.prototype=g.prototype,y.prototype=new r,r.prototype=null),y}})}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){var e,n,i;"DOMTokenList"in this&&(!("classList"in(e=document.createElement("x")))||!e.classList.toggle("x",!1)&&!e.className)||("DOMTokenList"in(n=this)&&n.DOMTokenList&&(!document.createElementNS||!document.createElementNS("http://www.w3.org/2000/svg","svg")||document.createElementNS("http://www.w3.org/2000/svg","svg").classList instanceof DOMTokenList)||(n.DOMTokenList=function(){var e=!0,n=function(t,n,i,o){Object.defineProperty?Object.defineProperty(t,n,{configurable:!1===e||!!o,get:i}):t.__defineGetter__(n,i)};try{n({},"support")}catch(t){e=!1}return function(e,i){var o=this,s=[],r={},c=0,u=0,l=function(t){n(o,t,(function(){return h(),s[t]}),!1)},d=function(){if(c>=u)for(;u<c;++u)l(u)},h=function(){var t,n,o=arguments,u=/\s+/;if(o.length)for(n=0;n<o.length;++n)if(u.test(o[n]))throw(t=new SyntaxError('String "'+o[n]+'" contains an invalid character')).code=5,t.name="InvalidCharacterError",t;for(""===(s="object"===a(e[i])?(""+e[i].baseVal).replace(/^\s+|\s+$/g,"").split(u):(""+e[i]).replace(/^\s+|\s+$/g,"").split(u))[0]&&(s=[]),r={},n=0;n<s.length;++n)r[s[n]]=!0;c=s.length,d()};return h(),n(o,"length",(function(){return h(),c})),o.toLocaleString=o.toString=function(){return h(),s.join(" ")},o.item=function(t){return h(),s[t]},o.contains=function(t){return h(),!!r[t]},o.add=function(){h.apply(o,t=arguments);for(var t,n,u=0,l=t.length;u<l;++u)n=t[u],r[n]||(s.push(n),r[n]=!0);c!==s.length&&(c=s.length>>>0,"object"===a(e[i])?e[i].baseVal=s.join(" "):e[i]=s.join(" "),d())},o.remove=function(){h.apply(o,t=arguments);for(var t,n={},u=0,l=[];u<t.length;++u)n[t[u]]=!0,delete r[t[u]];for(u=0;u<s.length;++u)n[s[u]]||l.push(s[u]);s=l,c=l.length>>>0,"object"===a(e[i])?e[i].baseVal=s.join(" "):e[i]=s.join(" "),d()},o.toggle=function(e,n){return h.apply(o,[e]),t!==n?n?(o.add(e),!0):(o.remove(e),!1):r[e]?(o.remove(e),!1):(o.add(e),!0)},o}}()),"classList"in(i=document.createElement("span"))&&(i.classList.toggle("x",!1),i.classList.contains("x")&&(i.classList.constructor.prototype.toggle=function(e){var n=arguments[1];if(n===t){var i=!this.contains(e);return this[i?"add":"remove"](e),i}return this[(n=!!n)?"add":"remove"](e),n})),function(){var t=document.createElement("span");if("classList"in t&&(t.classList.add("a","b"),!t.classList.contains("b"))){var e=t.classList.constructor.prototype.add;t.classList.constructor.prototype.add=function(){for(var t=arguments,n=arguments.length,i=0;i<n;i++)e.call(this,t[i])}}}(),function(){var t=document.createElement("span");if("classList"in t&&(t.classList.add("a"),t.classList.add("b"),t.classList.remove("a","b"),t.classList.contains("b"))){var e=t.classList.constructor.prototype.remove;t.classList.constructor.prototype.remove=function(){for(var t=arguments,n=arguments.length,i=0;i<n;i++)e.call(this,t[i])}}}())}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){"Document"in this||"undefined"==typeof WorkerGlobalScope&&"function"!=typeof importScripts&&(this.HTMLDocument?this.Document=this.HTMLDocument:(this.Document=this.HTMLDocument=document.constructor=new Function("return function Document() {}")(),this.Document.prototype=document))}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){"Element"in this&&"HTMLElement"in this||function(){if(!window.Element||window.HTMLElement){window.Element=window.HTMLElement=new Function("return function Element() {}")();var t,e=document.appendChild(document.createElement("body")),n=e.appendChild(document.createElement("iframe")).contentWindow.document,i=Element.prototype=n.appendChild(n.createElement("*")),o={},s=function t(e,n){var i,s,r,a=e.childNodes||[],c=-1;if(1===e.nodeType&&e.constructor!==Element)for(i in e.constructor=Element,o)s=o[i],e[i]=s;for(;r=n&&a[++c];)t(r,n);return e},r=document.getElementsByTagName("*"),a=document.createElement,c=100;i.attachEvent("onpropertychange",(function(t){for(var e,n=t.propertyName,s=!o.hasOwnProperty(n),a=i[n],c=o[n],u=-1;e=r[++u];)1===e.nodeType&&(s||e[n]===c)&&(e[n]=a);o[n]=a})),i.constructor=Element,i.hasAttribute||(i.hasAttribute=function(t){return null!==this.getAttribute(t)}),u()||(document.onreadystatechange=u,t=setInterval(u,25)),document.createElement=function(t){var e=a(String(t).toLowerCase());return s(e)},document.removeChild(e)}else window.HTMLElement=window.Element;function u(){return c--||clearTimeout(t),!(!document.body||document.body.prototype||!/(complete|interactive)/.test(document.readyState)||(s(document,!0),t&&document.body.prototype&&clearTimeout(t),!document.body.prototype))}}()}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){var e;"document"in this&&"classList"in document.documentElement&&"Element"in this&&"classList"in Element.prototype&&((e=document.createElement("span")).classList.add("a","b"),e.classList.contains("b"))||function(t){var e=!0,n=function(t,n,i,o){Object.defineProperty?Object.defineProperty(t,n,{configurable:!1===e||!!o,get:i}):t.__defineGetter__(n,i)};try{n({},"support")}catch(t){e=!1}var i=function t(i,o,s){n(i.prototype,o,(function(){var i,r=this,a="__defineGetter__DEFINE_PROPERTY"+o;if(r[a])return i;if(r[a]=!0,!1===e){for(var c,u=t.mirror||document.createElement("div"),l=u.childNodes,d=l.length,h=0;h<d;++h)if(l[h]._R===r){c=l[h];break}c||(c=u.appendChild(document.createElement("div"))),i=DOMTokenList.call(c,r,s)}else i=new DOMTokenList(r,s);return n(r,o,(function(){return i})),delete r[a],i}),!0)};i(t.Element,"classList","className"),i(t.HTMLElement,"classList","className"),i(t.HTMLLinkElement,"relList","rel"),i(t.HTMLAnchorElement,"relList","rel"),i(t.HTMLAreaElement,"relList","rel")}(this)}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),i.prototype.init=function(){if(this.$module){this.initControls(),this.initSectionHeaders();var t=this.checkIfAllSectionsOpen();this.updateShowAllButton(t)}},i.prototype.initControls=function(){this.$showAllButton=document.createElement("button"),this.$showAllButton.setAttribute("type","button"),this.$showAllButton.setAttribute("class",this.showAllClass),this.$showAllButton.setAttribute("aria-expanded","false");var t=document.createElement("span");t.classList.add(this.upChevronIconClass),this.$showAllButton.appendChild(t);var e=document.createElement("div");e.setAttribute("class",this.controlsClass),e.appendChild(this.$showAllButton),this.$module.insertBefore(e,this.$module.firstChild);var n=document.createElement("span");n.classList.add(this.showAllTextClass),this.$showAllButton.appendChild(n),this.$showAllButton.addEventListener("click",this.onShowOrHideAllToggle.bind(this))},i.prototype.initSectionHeaders=function(){e(this.$sections,function(t,e){var n=t.querySelector("."+this.sectionHeaderClass);this.constructHeaderMarkup(n,e),this.setExpanded(this.isExpanded(t),t),n.addEventListener("click",this.onSectionToggle.bind(this,t)),this.setInitialState(t)}.bind(this))},i.prototype.constructHeaderMarkup=function(t,e){var n=t.querySelector("."+this.sectionButtonClass),i=t.querySelector("."+this.sectionHeadingClass),o=t.querySelector("."+this.sectionSummaryClass),s=document.createElement("button");s.setAttribute("type","button"),s.setAttribute("aria-controls",this.moduleId+"-content-"+(e+1));for(var r=0;r<n.attributes.length;r++){var a=n.attributes.item(r);"id"!==a.nodeName&&s.setAttribute(a.nodeName,a.nodeValue)}var c=document.createElement("span");c.classList.add(this.sectionHeadingTextClass),c.id=n.id;var u=document.createElement("span");u.classList.add(this.sectionHeadingTextFocusClass),c.appendChild(u),u.innerHTML=n.innerHTML;var l=document.createElement("span");l.classList.add(this.sectionShowHideToggleClass),l.setAttribute("data-nosnippet","");var d=document.createElement("span");d.classList.add(this.sectionShowHideToggleFocusClass),l.appendChild(d);var h=document.createElement("span"),p=document.createElement("span");if(p.classList.add(this.upChevronIconClass),d.appendChild(p),h.classList.add(this.sectionShowHideTextClass),d.appendChild(h),s.appendChild(c),s.appendChild(this.getButtonPunctuationEl()),null!=o){var f=document.createElement("span"),m=document.createElement("span");m.classList.add(this.sectionSummaryFocusClass),f.appendChild(m);for(var v=0,b=o.attributes.length;v<b;++v){var g=o.attributes.item(v).nodeName,y=o.attributes.item(v).nodeValue;f.setAttribute(g,y)}m.innerHTML=o.innerHTML,o.parentNode.replaceChild(f,o),s.appendChild(f),s.appendChild(this.getButtonPunctuationEl())}s.appendChild(l),i.removeChild(n),i.appendChild(s)},i.prototype.onSectionToggle=function(t){var e=this.isExpanded(t);this.setExpanded(!e,t),this.storeState(t)},i.prototype.onShowOrHideAllToggle=function(){var t=this,n=this.$sections,i=!this.checkIfAllSectionsOpen();e(n,(function(e){t.setExpanded(i,e),t.storeState(e)})),t.updateShowAllButton(i)},i.prototype.setExpanded=function(t,e){var n=e.querySelector("."+this.upChevronIconClass),i=e.querySelector("."+this.sectionShowHideTextClass),o=e.querySelector("."+this.sectionButtonClass),s=t?"Hide":"Show",r=document.createElement("span");r.classList.add("govuk-visually-hidden"),r.innerHTML=" this section",i.innerHTML=s,i.appendChild(r),o.setAttribute("aria-expanded",t),t?(e.classList.add(this.sectionExpandedClass),n.classList.remove(this.downChevronIconClass)):(e.classList.remove(this.sectionExpandedClass),n.classList.add(this.downChevronIconClass));var a=this.checkIfAllSectionsOpen();this.updateShowAllButton(a)},i.prototype.isExpanded=function(t){return t.classList.contains(this.sectionExpandedClass)},i.prototype.checkIfAllSectionsOpen=function(){return this.$sections.length===this.$module.querySelectorAll("."+this.sectionExpandedClass).length},i.prototype.updateShowAllButton=function(t){var e=this.$showAllButton.querySelector("."+this.upChevronIconClass),n=this.$showAllButton.querySelector("."+this.showAllTextClass),i=t?"Hide all sections":"Show all sections";this.$showAllButton.setAttribute("aria-expanded",t),n.innerHTML=i,t?e.classList.remove(this.downChevronIconClass):e.classList.add(this.downChevronIconClass)};var o={checkForSessionStorage:function(){var t,e="this is the test string";try{return window.sessionStorage.setItem(e,e),t=window.sessionStorage.getItem(e)===e.toString(),window.sessionStorage.removeItem(e),t}catch(t){return!1}}};function s(t){this.$module=t,this.debounceFormSubmitTimer=null}function r(t){this.$module=t}function c(t){this.$module=t,this.$textarea=t.querySelector(".govuk-js-character-count"),this.$visibleCountMessage=null,this.$screenReaderCountMessage=null,this.lastInputTimestamp=null}function u(t){this.$module=t,this.$inputs=t.querySelectorAll('input[type="checkbox"]')}function l(t){this.$module=t}function d(t){this.$module=t}function h(t){this.$module=t,this.$menuButton=t&&t.querySelector(".govuk-js-header-toggle"),this.$menu=this.$menuButton&&t.querySelector("#"+this.$menuButton.getAttribute("aria-controls")),this.menuIsOpen=!1,this.mql=null}function p(t){this.$module=t,this.$inputs=t.querySelectorAll('input[type="radio"]')}function f(t){this.$module=t,this.$linkedElement=null,this.linkedElementListener=!1}function m(t){this.$module=t,this.$tabs=t.querySelectorAll(".govuk-tabs__tab"),this.keys={left:37,right:39,up:38,down:40},this.jsHiddenClass="govuk-tabs__panel--hidden"}i.prototype.storeState=function(t){if(this.browserSupportsSessionStorage){var e=t.querySelector("."+this.sectionButtonClass);if(e){var n=e.getAttribute("aria-controls"),i=e.getAttribute("aria-expanded");n&&i&&window.sessionStorage.setItem(n,i)}}},i.prototype.setInitialState=function(t){if(this.browserSupportsSessionStorage){var e=t.querySelector("."+this.sectionButtonClass);if(e){var n=e.getAttribute("aria-controls"),i=n?window.sessionStorage.getItem(n):null;null!==i&&this.setExpanded("true"===i,t)}}},i.prototype.getButtonPunctuationEl=function(){var t=document.createElement("span");return t.classList.add("govuk-visually-hidden","govuk-accordion__section-heading-divider"),t.innerHTML=", ",t},function(t){"Window"in this||"undefined"==typeof WorkerGlobalScope&&"function"!=typeof importScripts&&function(t){t.constructor?t.Window=t.constructor:(t.Window=t.constructor=new Function("return function Window() {}")()).prototype=this}(this)}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){(function(t){if(!("Event"in t))return!1;if("function"==typeof t.Event)return!0;try{return new Event("click"),!0}catch(t){return!1}})(this)||function(){var e={click:1,dblclick:1,keyup:1,keypress:1,keydown:1,mousedown:1,mouseup:1,mousemove:1,mouseover:1,mouseenter:1,mouseleave:1,mouseout:1,storage:1,storagecommit:1,textinput:1};if("undefined"!=typeof document&&"undefined"!=typeof window){var n=window.Event&&window.Event.prototype||null;window.Event=Window.prototype.Event=function(e,n){if(!e)throw new Error("Not enough arguments");var i;if("createEvent"in document){i=document.createEvent("Event");var o=!(!n||n.bubbles===t)&&n.bubbles,s=!(!n||n.cancelable===t)&&n.cancelable;return i.initEvent(e,o,s),i}return(i=document.createEventObject()).type=e,i.bubbles=!(!n||n.bubbles===t)&&n.bubbles,i.cancelable=!(!n||n.cancelable===t)&&n.cancelable,i},n&&Object.defineProperty(window.Event,"prototype",{configurable:!1,enumerable:!1,writable:!0,value:n}),"createEvent"in document||(window.addEventListener=Window.prototype.addEventListener=Document.prototype.addEventListener=Element.prototype.addEventListener=function(){var t=this,n=arguments[0],o=arguments[1];if(t===window&&n in e)throw new Error("In IE8 the event: "+n+" is not available on the window object. Please see https://github.com/Financial-Times/polyfill-service/issues/317 for more information.");t._events||(t._events={}),t._events[n]||(t._events[n]=function(e){var n,o=t._events[e.type].list,s=o.slice(),r=-1,a=s.length;for(e.preventDefault=function(){!1!==e.cancelable&&(e.returnValue=!1)},e.stopPropagation=function(){e.cancelBubble=!0},e.stopImmediatePropagation=function(){e.cancelBubble=!0,e.cancelImmediate=!0},e.currentTarget=t,e.relatedTarget=e.fromElement||null,e.target=e.target||e.srcElement||t,e.timeStamp=(new Date).getTime(),e.clientX&&(e.pageX=e.clientX+document.documentElement.scrollLeft,e.pageY=e.clientY+document.documentElement.scrollTop);++r<a&&!e.cancelImmediate;)r in s&&-1!==i(o,n=s[r])&&"function"==typeof n&&n.call(t,e)},t._events[n].list=[],t.attachEvent&&t.attachEvent("on"+n,t._events[n])),t._events[n].list.push(o)},window.removeEventListener=Window.prototype.removeEventListener=Document.prototype.removeEventListener=Element.prototype.removeEventListener=function(){var t,e=this,n=arguments[0],o=arguments[1];e._events&&e._events[n]&&e._events[n].list&&-1!==(t=i(e._events[n].list,o))&&(e._events[n].list.splice(t,1),e._events[n].list.length||(e.detachEvent&&e.detachEvent("on"+n,e._events[n]),delete e._events[n]))},window.dispatchEvent=Window.prototype.dispatchEvent=Document.prototype.dispatchEvent=Element.prototype.dispatchEvent=function(t){if(!arguments.length)throw new Error("Not enough arguments");if(!t||"string"!=typeof t.type)throw new Error("DOM Events Exception 0");var e=this,n=t.type;try{if(!t.bubbles){t.cancelBubble=!0;var i=function t(i){i.cancelBubble=!0,(e||window).detachEvent("on"+n,t)};this.attachEvent("on"+n,i)}this.fireEvent("on"+n,t)}catch(i){t.target=e;do{t.currentTarget=e,"_events"in e&&"function"==typeof e._events[n]&&e._events[n].call(e,t),"function"==typeof e["on"+n]&&e["on"+n].call(e,t),e=9===e.nodeType?e.parentWindow:e.parentNode}while(e&&!t.cancelBubble)}return!0},document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&document.dispatchEvent(new Event("DOMContentLoaded",{bubbles:!0}))})))}function i(t,e){for(var n=-1,i=t.length;++n<i;)if(n in t&&t[n]===e)return n;return-1}}()}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),s.prototype.handleKeyDown=function(t){var e=t.target;"button"===e.getAttribute("role")&&32===t.keyCode&&(t.preventDefault(),e.click())},s.prototype.debounce=function(t){if("true"===t.target.getAttribute("data-prevent-double-click"))return this.debounceFormSubmitTimer?(t.preventDefault(),!1):void(this.debounceFormSubmitTimer=setTimeout(function(){this.debounceFormSubmitTimer=null}.bind(this),1e3))},s.prototype.init=function(){this.$module.addEventListener("keydown",this.handleKeyDown),this.$module.addEventListener("click",this.debounce)},r.prototype.init=function(){this.$module&&("boolean"==typeof this.$module.open||this.polyfillDetails())},r.prototype.polyfillDetails=function(){var t,e=this.$module,n=this.$summary=e.getElementsByTagName("summary").item(0),i=this.$content=e.getElementsByTagName("div").item(0);n&&i&&(i.id||(i.id="details-content-"+(t=(new Date).getTime(),void 0!==window.performance&&"function"==typeof window.performance.now&&(t+=window.performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var n=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"===e?n:3&n|8).toString(16)})))),e.setAttribute("role","group"),n.setAttribute("role","button"),n.setAttribute("aria-controls",i.id),n.tabIndex=0,this.$module.hasAttribute("open")?n.setAttribute("aria-expanded","true"):(n.setAttribute("aria-expanded","false"),i.style.display="none"),this.polyfillHandleInputs(n,this.polyfillSetAttributes.bind(this)))},r.prototype.polyfillSetAttributes=function(){return this.$module.hasAttribute("open")?(this.$module.removeAttribute("open"),this.$summary.setAttribute("aria-expanded","false"),this.$content.style.display="none"):(this.$module.setAttribute("open","open"),this.$summary.setAttribute("aria-expanded","true"),this.$content.style.display=""),!0},r.prototype.polyfillHandleInputs=function(t,e){t.addEventListener("keypress",(function(t){var n=t.target;13!==t.keyCode&&32!==t.keyCode||"summary"===n.nodeName.toLowerCase()&&(t.preventDefault(),n.click?n.click():e(t))})),t.addEventListener("keyup",(function(t){var e=t.target;32===t.keyCode&&"summary"===e.nodeName.toLowerCase()&&t.preventDefault()})),t.addEventListener("click",e)},c.prototype.defaults={characterCountAttribute:"data-maxlength",wordCountAttribute:"data-maxwords"},c.prototype.init=function(){if(this.$textarea){var t=this.$module,e=this.$textarea,n=document.getElementById(e.id+"-info");e.insertAdjacentElement("afterend",n);var i=document.createElement("div");i.className="govuk-character-count__sr-status govuk-visually-hidden",i.setAttribute("aria-live","polite"),this.$screenReaderCountMessage=i,n.insertAdjacentElement("afterend",i);var o=document.createElement("div");o.className=n.className,o.classList.add("govuk-character-count__status"),o.setAttribute("aria-hidden","true"),this.$visibleCountMessage=o,n.insertAdjacentElement("afterend",o),n.classList.add("govuk-visually-hidden"),this.options=this.getDataset(t);var s=this.defaults.characterCountAttribute;this.options.maxwords&&(s=this.defaults.wordCountAttribute),this.maxLength=t.getAttribute(s),this.maxLength&&(e.removeAttribute("maxlength"),this.bindChangeEvents(),"onpageshow"in window?window.addEventListener("pageshow",this.updateCountMessage.bind(this)):window.addEventListener("DOMContentLoaded",this.updateCountMessage.bind(this)),this.updateCountMessage())}},c.prototype.getDataset=function(t){var e={},n=t.attributes;if(n)for(var i=0;i<n.length;i++){var o=n[i],s=o.name.match(/^data-(.+)/);s&&(e[s[1]]=o.value)}return e},c.prototype.count=function(t){return this.options.maxwords?(t.match(/\S+/g)||[]).length:t.length},c.prototype.bindChangeEvents=function(){var t=this.$textarea;t.addEventListener("keyup",this.handleKeyUp.bind(this)),t.addEventListener("focus",this.handleFocus.bind(this)),t.addEventListener("blur",this.handleBlur.bind(this))},c.prototype.checkIfValueChanged=function(){this.$textarea.oldValue||(this.$textarea.oldValue=""),this.$textarea.value!==this.$textarea.oldValue&&(this.$textarea.oldValue=this.$textarea.value,this.updateCountMessage())},c.prototype.updateCountMessage=function(){this.updateVisibleCountMessage(),this.updateScreenReaderCountMessage()},c.prototype.updateVisibleCountMessage=function(){var t=this.$textarea,e=this.$visibleCountMessage,n=this.maxLength-this.count(t.value);this.isOverThreshold()?e.classList.remove("govuk-character-count__message--disabled"):e.classList.add("govuk-character-count__message--disabled"),n<0?(t.classList.add("govuk-textarea--error"),e.classList.remove("govuk-hint"),e.classList.add("govuk-error-message")):(t.classList.remove("govuk-textarea--error"),e.classList.remove("govuk-error-message"),e.classList.add("govuk-hint")),e.innerHTML=this.formattedUpdateMessage()},c.prototype.updateScreenReaderCountMessage=function(){var t=this.$screenReaderCountMessage;this.isOverThreshold()?t.removeAttribute("aria-hidden"):t.setAttribute("aria-hidden",!0),t.innerHTML=this.formattedUpdateMessage()},c.prototype.formattedUpdateMessage=function(){var t,e=this.$textarea,n=this.options,i=this.maxLength-this.count(e.value),o="character";return n.maxwords&&(o="word"),o+=-1===i||1===i?"":"s",t=i<0?"too many":"remaining","You have "+Math.abs(i)+" "+o+" "+t},c.prototype.isOverThreshold=function(){var t=this.$textarea,e=this.options,n=this.count(t.value);return this.maxLength*(e.threshold?e.threshold:0)/100<=n},c.prototype.handleKeyUp=function(){this.updateVisibleCountMessage(),this.lastInputTimestamp=Date.now()},c.prototype.handleFocus=function(){this.valueChecker=setInterval(function(){(!this.lastInputTimestamp||Date.now()-500>=this.lastInputTimestamp)&&this.checkIfValueChanged()}.bind(this),1e3)},c.prototype.handleBlur=function(){clearInterval(this.valueChecker)},u.prototype.init=function(){var t=this.$module;e(this.$inputs,(function(t){var e=t.getAttribute("data-aria-controls");e&&document.getElementById(e)&&(t.setAttribute("aria-controls",e),t.removeAttribute("data-aria-controls"))})),"onpageshow"in window?window.addEventListener("pageshow",this.syncAllConditionalReveals.bind(this)):window.addEventListener("DOMContentLoaded",this.syncAllConditionalReveals.bind(this)),this.syncAllConditionalReveals(),t.addEventListener("click",this.handleClick.bind(this))},u.prototype.syncAllConditionalReveals=function(){e(this.$inputs,this.syncConditionalRevealWithInputState.bind(this))},u.prototype.syncConditionalRevealWithInputState=function(t){var e=document.getElementById(t.getAttribute("aria-controls"));if(e&&e.classList.contains("govuk-checkboxes__conditional")){var n=t.checked;t.setAttribute("aria-expanded",n),e.classList.toggle("govuk-checkboxes__conditional--hidden",!n)}},u.prototype.unCheckAllInputsExcept=function(t){e(document.querySelectorAll('input[type="checkbox"][name="'+t.name+'"]'),function(e){t.form===e.form&&e!==t&&(e.checked=!1,this.syncConditionalRevealWithInputState(e))}.bind(this))},u.prototype.unCheckExclusiveInputs=function(t){e(document.querySelectorAll('input[data-behaviour="exclusive"][type="checkbox"][name="'+t.name+'"]'),function(e){t.form===e.form&&(e.checked=!1,this.syncConditionalRevealWithInputState(e))}.bind(this))},u.prototype.handleClick=function(t){var e=t.target;"checkbox"===e.type&&(e.getAttribute("aria-controls")&&this.syncConditionalRevealWithInputState(e),e.checked&&("exclusive"===e.getAttribute("data-behaviour")?this.unCheckAllInputsExcept(e):this.unCheckExclusiveInputs(e)))},function(t){"document"in this&&"matches"in document.documentElement||(Element.prototype.matches=Element.prototype.webkitMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.mozMatchesSelector||function(t){for(var e=this,n=(e.document||e.ownerDocument).querySelectorAll(t),i=0;n[i]&&n[i]!==e;)++i;return!!n[i]})}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){"document"in this&&"closest"in document.documentElement||(Element.prototype.closest=function(t){for(var e=this;e;){if(e.matches(t))return e;e="SVGElement"in window&&e instanceof SVGElement?e.parentNode:e.parentElement}return null})}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),l.prototype.init=function(){var t=this.$module;t&&(this.setFocus(),t.addEventListener("click",this.handleClick.bind(this)))},l.prototype.setFocus=function(){var t=this.$module;"true"!==t.getAttribute("data-disable-auto-focus")&&(t.setAttribute("tabindex","-1"),t.addEventListener("blur",(function(){t.removeAttribute("tabindex")})),t.focus())},l.prototype.handleClick=function(t){var e=t.target;this.focusTarget(e)&&t.preventDefault()},l.prototype.focusTarget=function(t){if("A"!==t.tagName||!1===t.href)return!1;var e=this.getFragmentFromUrl(t.href),n=document.getElementById(e);if(!n)return!1;var i=this.getAssociatedLegendOrLabel(n);return!!i&&(i.scrollIntoView(),n.focus({preventScroll:!0}),!0)},l.prototype.getFragmentFromUrl=function(t){return-1!==t.indexOf("#")&&t.split("#").pop()},l.prototype.getAssociatedLegendOrLabel=function(t){var e=t.closest("fieldset");if(e){var n=e.getElementsByTagName("legend");if(n.length){var i=n[0];if("checkbox"===t.type||"radio"===t.type)return i;var o=i.getBoundingClientRect().top,s=t.getBoundingClientRect();if(s.height&&window.innerHeight&&s.top+s.height-o<window.innerHeight/2)return i}}return document.querySelector("label[for='"+t.getAttribute("id")+"']")||t.closest("label")},d.prototype.init=function(){this.$module&&this.setFocus()},d.prototype.setFocus=function(){var t=this.$module;"true"!==t.getAttribute("data-disable-auto-focus")&&"alert"===t.getAttribute("role")&&(t.getAttribute("tabindex")||(t.setAttribute("tabindex","-1"),t.addEventListener("blur",(function(){t.removeAttribute("tabindex")}))),t.focus())},h.prototype.init=function(){this.$module&&this.$menuButton&&this.$menu&&("matchMedia"in window?(this.mql=window.matchMedia("(min-width: 48.0625em)"),"addEventListener"in this.mql?this.mql.addEventListener("change",this.syncState.bind(this)):this.mql.addListener(this.syncState.bind(this)),this.syncState(),this.$menuButton.addEventListener("click",this.handleMenuButtonClick.bind(this))):this.$menuButton.setAttribute("hidden",""))},h.prototype.syncState=function(){this.mql.matches?(this.$menu.removeAttribute("hidden"),this.$menuButton.setAttribute("hidden","")):(this.$menuButton.removeAttribute("hidden"),this.$menuButton.setAttribute("aria-expanded",this.menuIsOpen),this.menuIsOpen?this.$menu.removeAttribute("hidden"):this.$menu.setAttribute("hidden",""))},h.prototype.handleMenuButtonClick=function(){this.menuIsOpen=!this.menuIsOpen,this.syncState()},p.prototype.init=function(){var t=this.$module;e(this.$inputs,(function(t){var e=t.getAttribute("data-aria-controls");e&&document.getElementById(e)&&(t.setAttribute("aria-controls",e),t.removeAttribute("data-aria-controls"))})),"onpageshow"in window?window.addEventListener("pageshow",this.syncAllConditionalReveals.bind(this)):window.addEventListener("DOMContentLoaded",this.syncAllConditionalReveals.bind(this)),this.syncAllConditionalReveals(),t.addEventListener("click",this.handleClick.bind(this))},p.prototype.syncAllConditionalReveals=function(){e(this.$inputs,this.syncConditionalRevealWithInputState.bind(this))},p.prototype.syncConditionalRevealWithInputState=function(t){var e=document.getElementById(t.getAttribute("aria-controls"));if(e&&e.classList.contains("govuk-radios__conditional")){var n=t.checked;t.setAttribute("aria-expanded",n),e.classList.toggle("govuk-radios__conditional--hidden",!n)}},p.prototype.handleClick=function(t){var n=t.target;"radio"===n.type&&e(document.querySelectorAll('input[type="radio"][aria-controls]'),function(t){var e=t.form===n.form;t.name===n.name&&e&&this.syncConditionalRevealWithInputState(t)}.bind(this))},f.prototype.init=function(){this.$module&&(this.$linkedElement=this.getLinkedElement(),this.$linkedElement&&this.$module.addEventListener("click",this.focusLinkedElement.bind(this)))},f.prototype.getLinkedElement=function(){var t=this.getFragmentFromUrl();return!!t&&document.getElementById(t)},f.prototype.focusLinkedElement=function(){var t=this.$linkedElement;t.getAttribute("tabindex")||(t.setAttribute("tabindex","-1"),t.classList.add("govuk-skip-link-focused-element"),this.linkedElementListener||(this.$linkedElement.addEventListener("blur",this.removeFocusProperties.bind(this)),this.linkedElementListener=!0)),t.focus()},f.prototype.removeFocusProperties=function(){this.$linkedElement.removeAttribute("tabindex"),this.$linkedElement.classList.remove("govuk-skip-link-focused-element")},f.prototype.getFragmentFromUrl=function(){return!!this.$module.hash&&this.$module.hash.split("#").pop()},function(t){"document"in this&&"nextElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t&&1!==t.nodeType;)t=t.nextSibling;return t}})}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),function(t){"document"in this&&"previousElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"previousElementSibling",{get:function(){for(var t=this.previousSibling;t&&1!==t.nodeType;)t=t.previousSibling;return t}})}.call("object"===("undefined"==typeof window?"undefined":a(window))&&window||"object"===("undefined"==typeof self?"undefined":a(self))&&self||"object"===(void 0===n.g?"undefined":a(n.g))&&n.g||{}),m.prototype.init=function(){"function"==typeof window.matchMedia?this.setupResponsiveChecks():this.setup()},m.prototype.setupResponsiveChecks=function(){this.mql=window.matchMedia("(min-width: 40.0625em)"),this.mql.addListener(this.checkMode.bind(this)),this.checkMode()},m.prototype.checkMode=function(){this.mql.matches?this.setup():this.teardown()},m.prototype.setup=function(){var t=this.$module,n=this.$tabs,i=t.querySelector(".govuk-tabs__list"),o=t.querySelectorAll(".govuk-tabs__list-item");if(n&&i&&o){i.setAttribute("role","tablist"),e(o,(function(t){t.setAttribute("role","presentation")})),e(n,function(t){this.setAttributes(t),t.boundTabClick=this.onTabClick.bind(this),t.boundTabKeydown=this.onTabKeydown.bind(this),t.addEventListener("click",t.boundTabClick,!0),t.addEventListener("keydown",t.boundTabKeydown,!0),this.hideTab(t)}.bind(this));var s=this.getTab(window.location.hash)||this.$tabs[0];this.showTab(s),t.boundOnHashChange=this.onHashChange.bind(this),window.addEventListener("hashchange",t.boundOnHashChange,!0)}},m.prototype.teardown=function(){var t=this.$module,n=this.$tabs,i=t.querySelector(".govuk-tabs__list"),o=t.querySelectorAll(".govuk-tabs__list-item");n&&i&&o&&(i.removeAttribute("role"),e(o,(function(t){t.removeAttribute("role","presentation")})),e(n,function(t){t.removeEventListener("click",t.boundTabClick,!0),t.removeEventListener("keydown",t.boundTabKeydown,!0),this.unsetAttributes(t)}.bind(this)),window.removeEventListener("hashchange",t.boundOnHashChange,!0))},m.prototype.onHashChange=function(t){var e=window.location.hash,n=this.getTab(e);if(n)if(this.changingHash)this.changingHash=!1;else{var i=this.getCurrentTab();this.hideTab(i),this.showTab(n),n.focus()}},m.prototype.hideTab=function(t){this.unhighlightTab(t),this.hidePanel(t)},m.prototype.showTab=function(t){this.highlightTab(t),this.showPanel(t)},m.prototype.getTab=function(t){return this.$module.querySelector('.govuk-tabs__tab[href="'+t+'"]')},m.prototype.setAttributes=function(t){var e=this.getHref(t).slice(1);t.setAttribute("id","tab_"+e),t.setAttribute("role","tab"),t.setAttribute("aria-controls",e),t.setAttribute("aria-selected","false"),t.setAttribute("tabindex","-1");var n=this.getPanel(t);n.setAttribute("role","tabpanel"),n.setAttribute("aria-labelledby",t.id),n.classList.add(this.jsHiddenClass)},m.prototype.unsetAttributes=function(t){t.removeAttribute("id"),t.removeAttribute("role"),t.removeAttribute("aria-controls"),t.removeAttribute("aria-selected"),t.removeAttribute("tabindex");var e=this.getPanel(t);e.removeAttribute("role"),e.removeAttribute("aria-labelledby"),e.classList.remove(this.jsHiddenClass)},m.prototype.onTabClick=function(t){if(!t.target.classList.contains("govuk-tabs__tab"))return!1;t.preventDefault();var e=t.target,n=this.getCurrentTab();this.hideTab(n),this.showTab(e),this.createHistoryEntry(e)},m.prototype.createHistoryEntry=function(t){var e=this.getPanel(t),n=e.id;e.id="",this.changingHash=!0,window.location.hash=this.getHref(t).slice(1),e.id=n},m.prototype.onTabKeydown=function(t){switch(t.keyCode){case this.keys.left:case this.keys.up:this.activatePreviousTab(),t.preventDefault();break;case this.keys.right:case this.keys.down:this.activateNextTab(),t.preventDefault()}},m.prototype.activateNextTab=function(){var t=this.getCurrentTab(),e=t.parentNode.nextElementSibling;if(e)var n=e.querySelector(".govuk-tabs__tab");n&&(this.hideTab(t),this.showTab(n),n.focus(),this.createHistoryEntry(n))},m.prototype.activatePreviousTab=function(){var t=this.getCurrentTab(),e=t.parentNode.previousElementSibling;if(e)var n=e.querySelector(".govuk-tabs__tab");n&&(this.hideTab(t),this.showTab(n),n.focus(),this.createHistoryEntry(n))},m.prototype.getPanel=function(t){return this.$module.querySelector(this.getHref(t))},m.prototype.showPanel=function(t){this.getPanel(t).classList.remove(this.jsHiddenClass)},m.prototype.hidePanel=function(t){this.getPanel(t).classList.add(this.jsHiddenClass)},m.prototype.unhighlightTab=function(t){t.setAttribute("aria-selected","false"),t.parentNode.classList.remove("govuk-tabs__list-item--selected"),t.setAttribute("tabindex","-1")},m.prototype.highlightTab=function(t){t.setAttribute("aria-selected","true"),t.parentNode.classList.add("govuk-tabs__list-item--selected"),t.setAttribute("tabindex","0")},m.prototype.getCurrentTab=function(){return this.$module.querySelector(".govuk-tabs__list-item--selected .govuk-tabs__tab")},m.prototype.getHref=function(t){var e=t.getAttribute("href");return e.slice(e.indexOf("#"),e.length)},t.initAll=function(t){var n=void 0!==(t=void 0!==t?t:{}).scope?t.scope:document;e(n.querySelectorAll('[data-module="govuk-button"]'),(function(t){new s(t).init()})),e(n.querySelectorAll('[data-module="govuk-accordion"]'),(function(t){new i(t).init()})),e(n.querySelectorAll('[data-module="govuk-details"]'),(function(t){new r(t).init()})),e(n.querySelectorAll('[data-module="govuk-character-count"]'),(function(t){new c(t).init()})),e(n.querySelectorAll('[data-module="govuk-checkboxes"]'),(function(t){new u(t).init()})),new l(n.querySelector('[data-module="govuk-error-summary"]')).init(),new h(n.querySelector('[data-module="govuk-header"]')).init(),e(n.querySelectorAll('[data-module="govuk-notification-banner"]'),(function(t){new d(t).init()})),e(n.querySelectorAll('[data-module="govuk-radios"]'),(function(t){new p(t).init()})),new f(n.querySelector('[data-module="govuk-skip-link"]')).init(),e(n.querySelectorAll('[data-module="govuk-tabs"]'),(function(t){new m(t).init()}))},t.Accordion=i,t.Button=s,t.Details=r,t.CharacterCount=c,t.Checkboxes=u,t.ErrorSummary=l,t.Header=h,t.NotificationBanner=d,t.Radios=p,t.SkipLink=f,t.Tabs=m},"object"===a(e)?r(e):(o=[e],void 0===(s="function"==typeof(i=r)?i.apply(e,o):i)||(t.exports=s))}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,n),s.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();n("./js/all.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,