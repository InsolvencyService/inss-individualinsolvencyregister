trigger:
- develop
  
pool:
  vmImage: windows-latest

variables:
- name: buildConfiguration
  value: 'Release'

parameters: 
- name: deployWebapp    
  type: boolean    
  default: true
- name: deployfuncapp    
  type: boolean    
  default: true
- name: RunIntTest    
  type: boolean    
  default: true

resources:
  repositories:
  - repository: inss-devops-common-lib
    type: github
    endpoint: InsolvencyService
    name: InsolvencyService/inss-devops-common-lib
    ref: develop
    
stages:
- stage: BuildTest
  displayName: 'Build and Test'
  jobs:  
    - job: 
      steps:
      - task: UseDotNet@2
        inputs:
          version: '6.0.x'

      - task: DotNetCoreCLI@2
        displayName: NuGet Restore
        inputs:
          command: 'restore'
          projects: |
            **/INSS.EIIR*.csproj
            !**/INSS.EIIR*Tests.csproj
  
      - task: Npm@1
        inputs:
          command: 'ci' 
          workingDir: $(System.DefaultWorkingDirectory)/INSS.EIIR.WEB

      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          # projects: '**/INSS.EIIR*.csproj'
          projects: |
            **/INSS.EIIR*.csproj
            !**/INSS.EIIR*Tests.csproj
          arguments: '--configuration $(buildConfiguration)'
        env:
          MSBUILDSINGLELOADCONTEXT: '1'       

      # - task: DotNetCoreCLI@2
      #   displayName: 'Run Tests'
      #   inputs:
      #     command: test
      #     projects: '**/*Tests/*.csproj'
      #     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'Publish Project'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            **/INSS.EIIR*.csproj
            !**/INSS.EIIR*Tests.csproj
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        env:
          MSBUILDSINGLELOADCONTEXT: '1' 
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'INSS.EIIR'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: DeployDev
  displayName: 'Deploy to Dev'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: EIIR-Dev
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'Dev'
        deployWebapp: true
        deployfuncapp: true

- stage: DeploySit
  displayName: 'Deploy to Sit'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: EIIR-Sit
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'Sit'
        deployWebapp: ${{ parameters.deployWebapp }}
        deployfuncapp: ${{ parameters.deployfuncapp }}

- stage: RunIntTest
  displayName: 'Execute Int Tests'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: EIIR-int-test-Sit
  jobs:
  - job: A
    steps:
      - ${{ if eq(parameters.RunIntTest, true) }}:

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'INSS.EIIR'
            patterns: '**/*QA*.zip'

        - task: ExtractFiles@1
          inputs:
            archiveFilePatterns: '$(Pipeline.Workspace)/*QA*.zip'
            destinationFolder: $(Pipeline.Workspace)
            cleanDestinationFolder: false
            overwriteExistingFiles: true

        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: Replace Tokens
          inputs:
            targetFiles: |
              $(Pipeline.Workspace)/appsettings-template.json
            encoding: 'auto'
            verbosity: 'detailed'
            actionOnMissing: 'log warning'
            keepToken: false
            tokenPrefix: '__'
            tokenSuffix: '__'
            useLegacyPattern: false

        - task: VSTest@2
          displayName: Execute Tests
          inputs:
            testSelector: 'testAssemblies'
            testAssemblyVer2: |
              INSS.EIIR.QA.Automation.dll
            searchFolder: '$(Pipeline.Workspace)'
            codeCoverageEnabled: true
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
          continueOnError: true

        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '*.trx'
            searchFolder: '$(Agent.TempDirectory)\TestResults'

- stage: DeployPreProd
  displayName: 'Deploy to PreProd'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: EIIR-PreProd
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'PreProd'
        deployWebapp: ${{ parameters.deployWebapp }}
        deployfuncapp: ${{ parameters.deployfuncapp }}






